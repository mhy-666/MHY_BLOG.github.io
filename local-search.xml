<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于背包问题及其拓展应用</title>
    <link href="/2021/04/19/%E5%85%B3%E4%BA%8E%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E6%8B%93%E5%B1%95%E5%BA%94%E7%94%A8/"/>
    <url>/2021/04/19/%E5%85%B3%E4%BA%8E%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E6%8B%93%E5%B1%95%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>背包问题是一个经典的动态规划问题。分为完全背包和01背包。每一种背包对应着两种解法，时间复杂度和空间复杂度分别为&lt;o(nw),o(nw)&gt;和&lt;o(nw),o(w)&gt;，可见差异在于空间复杂度。造成差异的原因是dp容器后者比前者少了一个维度。此外，两种背包问题它们后一种解法各自的迭代顺序不同；前一种解法的状态转移方程不同。以上就是两种背包问题本身的所有差异以及各自对应的两种解法的所有差异。<br>从个人来讲，我不喜欢第一种解法（不论是哪种背包问题），因为宏观上状态转移方程很好理解，但是for循环过程不好理解。我更喜欢后一种，既降低了空间复杂度，也在过程中更容易理解。以下是三种解法，前两个是01背包问题的第一第二解法，第三种是完全背包问题的第二解法。顺带一提，完全背包问题的第一解法的状态转移方程为dp[i][j]=max(dp[i-1][j],dp[i][j-w]+v)</p><p>// 背包问题.cpp : 此文件包含 “main” 函数。程序执行将在此处开始并结束。<br>//</p><p>#include <iostream><br>#include <vector><br>#include <cmath><br>#include &lt;math.h&gt;<br>using namespace std;<br>int max(int a, int b)<br>{<br>    if (a &gt;= b)return a;<br>    else return b;<br>}<br>void knapback(int N,int W,vector<int>&amp;value,vector<int>&amp; weight)<br>{</int></int></cmath></vector></iostream></p><pre><code>vector&lt;vector&lt;int&gt;&gt;dp(N+1, vector&lt;int&gt;(W+1,0));for (int i = 1; i &lt;= N; i++)&#123;    int w = weight[i];    int v = value[i];    for (int j = 1; j &lt;= W; j++)    &#123;        if (j &gt; w)            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w] + v);        else            dp[i][j] = dp[i - 1][j];    &#125;&#125;cout &lt;&lt; dp[N][W];</code></pre><p>}<br>void knapback_2(int N, int W, vector<int>&amp; value, vector<int>&amp; weight)<br>{<br>    vector<int>dp(W + 1,  0);<br>    for (int i = 1; i &lt;= N; i++)<br>    {<br>        int w = weight[i]; int v = value[i];<br>        for (int j = W; j &gt;= w; j–)<br>        {<br>            dp[j] = max(dp[j], dp[j - w] + v);<br>        }<br>    }<br>    cout &lt;&lt; dp[W];<br>}</int></int></int></p><p>void knapback_3(int N, int W, vector<int>&amp; value, vector<int>&amp; weight)//完全背包问题<br>{<br>    vector<int>dp(W + 1, 0);<br>    for (int i = 1; i &lt;= N; i++)<br>    {<br>        int w = weight[i]; int v = value[i];<br>        for (int j = w; j &lt;= W; j++)<br>        {<br>            dp[j] = max(dp[j], dp[j - w] + v);<br>        }<br>    }<br>    cout &lt;&lt; dp[W];<br>}<br>/*测试用例<br>34 10<br>2 7 3 4 8 5 8 6 4 16<br>15 25 8 9 15 9 13 9 6 14<br>34 10<br>2 8 4 4 8 7 8  5 16 16<br>15 25 9 9 15 12 12 6 14 9*/<br>int main()<br>{<br>    int W, N;<br>    cin &gt;&gt; W &gt;&gt; N;<br>    vector<int> weight(N + 1);<br>    vector<int> value(N + 1);<br>    for (int i = 1; i &lt;= N; i++)<br>    {<br>        cin &gt;&gt; weight[i];</int></int></int></int></int></p><pre><code>&#125;for (int i = 1; i &lt;= N; i++)&#123;    cin &gt;&gt; value[i];&#125;knapback_3(N,W,value,weight);</code></pre><p>}<br>这里面有一些自己在编程过程中犯的错误，还有一些技巧。<br>1.N+1,W+1<br>这里将vector的大小设为+1是因为更好的理解，以后自己也尽量不要去考虑0号元素，认为它是空就好了，同时编码的时候要注意for循环i的初始值和结束值。<br>2.vector的赋值问题<br>3.完全背包问题第二解法更新dp是正序遍历，为了是能够将平均价值最多的物品找出来。<br>4.01背包问题的第一解法内层循环分为j&gt;=w和j&lt;w两种情况，j&lt;w时直接把上一个i-1的dp赋值过去就好</p><p>自己还有一些疑惑，比如完全背包问题直接找平均价值最高的物品不就好了吗，为什么要这么麻烦？</p><p>#pragma once<br>/<em>题目描述<br>给定一个正整数数组，求是否可以把这个数组分成和相等的两部分。<br>输入输出样例<br>输入是一个一维正整数数组，输出时一个布尔值，表示是否可以满足题目要求。<br>Input : [1, 5, 11, 5]<br>Output : true<br>在这个样例中，满足条件的分割方法是[1, 5, 5] 和[11]。</em>/</p><p>#include <iostream><br>#include<vector><br>#include<cmath><br>#include&lt;math.h&gt;<br>using namespace std;<br>bool if416(vector<int>&amp;number,int n)<br>{</int></cmath></vector></iostream></p><pre><code>int target=0;for (int i = 1; i &lt; number.size(); i++)&#123;    target += number[i];&#125;if (target % 2)return false;target = target / 2;vector&lt;int&gt;dp(target + 1, 0);dp[0] = 1;for (int i = 1; i &lt;= n; i++)&#123;    int v = number[i];    for (int j = target; j &gt;= v; j--)    &#123;        dp[j] = dp[j] || dp[j - v];    &#125;&#125;cout &lt;&lt; dp[target];</code></pre><p>}<br>/*<br>4<br>1 5 5 11<br>*/</p><p>经过了这道题，我想试着总结一下背包问题的应用，或者说是神奇之处：它可以把n个有重量物品中任意x个物品的属性组合在一起，并把所有组合情况都遍历一遍。背包也好，上面这道题也好，所求的其实都是在某种重量约束下这些组合属性的限制条件，比如背包就是x个有重量物品，属性为价值，重量约束为不超过w，限制条件是x个物品的属性最大，dp为最大价值，过程为从0到w的所有最大价值。再比如上面这道题，就是x个有大小（重量）的数（物品），没有属性，重量约束为等于target，dp为真假，过程为从0到target的所有真假。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建博客中可能遇到的问题</title>
    <link href="/2021/04/15/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/04/15/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>1.StackOverflow是个好东西啊，善于利用它，就在刚刚它解决了困扰了我一天的问题，我说怎么新版本总是传不上去，原来是git版本太低了，真是未曾设想的错误。所以在搭建过程中如果是git bash总给你报各种各样的上传错误的话，很有可能是git的版本问题，当然了，具体什么情况把错误信息放到StackOverflow上问一下就好了。<br>2.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>真正意义上的第一篇博客</title>
    <link href="/2021/04/15/%E7%9C%9F%E6%AD%A3%E6%84%8F%E4%B9%89%E4%B8%8A%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/04/15/%E7%9C%9F%E6%AD%A3%E6%84%8F%E4%B9%89%E4%B8%8A%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>从昨天晚上七点逛各位互联网技术大佬的博客，到自己受启发决定搭建博客，再到刚刚终于将整个博客加主题搭好恰恰花了一天的时间。在这里发自内心的说一句，搭环境真的不是人干的事。但总归还是学到一些东西的，在此列举一下<br>1.昨天晚上其实就已经把一个简陋博客搭好了，但是由于配置问题css和js文件一直加载不出来（这个是今天困扰了我一天的问题）。由于是把博客托管给GitHub，在搭建的过程中避不开git管理仓库，所以昨天误打误撞的把git管理学了个大概（博客搭得不知道怎么样，反倒是把git给学了一些。笑）<br>2.知道了网页出问题要首先看一下浏览器f12里面的console运行情况<br>3.以及学会了怎么配置一些基本的博客上的小东西，具体请看hexo官方文档上有关_config.yml的介绍。<br>  本来今天早上看到有人说自己造了一个博客项目，自己看的热血沸腾，雄心壮志的准备也从零开始搞一个博客框架，幸好及时的认清自己的实力，作罢。<br>  搭建自己的博客也是受好友启发，前几日好友开通小红书记录生活，目的悦己。觉得很不错，又考虑到自己的专业，遂决定弄一个什么记录生活的东西出来，昨天逛技术博客，便水到渠成想到了博客。<br>  目前这个博客主题我想好了，就叫《代码与诗》，听起来就很文（装）艺（逼）哈哈哈哈哈哈。解释一下就是更新一些技术上的问题和解决方法，以及一些古诗和音乐上的感悟。<br>  第一篇技术博客我也已经想好了，就是搞了我一天的这个搭建博客过程中遇到的一些问题。<br>  讲道理，这些搭环境，装系统的事情真的是烦的很，且不和你的专业能力呈线性相关，你不知道这个东西就是不知道，有时候真的就是玄学，也有时候你根本不知道在什么地方会出什么样的错。网上的教程又大多数时候只是授之以鱼，背后稍微深层次的东西都讲不出来。顺便在这里祝自己早日丢掉在csdn这个垃圾桶里翻东西的习惯，翻得久了多少也会沾上一些臭味。<br>  就到这吧，该刷leetcode了，一天没刷了，这周日就要考试。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>have a try</title>
    <link href="/2021/04/15/have-a-try/"/>
    <url>/2021/04/15/have-a-try/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>article title</title>
    <link href="/2021/04/15/article-title/"/>
    <url>/2021/04/15/article-title/</url>
    
    <content type="html"><![CDATA[<p>希望能过</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
